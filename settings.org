# -*- mode: org; coding: utf-8; -*-
#+STARTUP: overview
#+TODO: ACTIVE | DISABLED
* ACTIVE Custom variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
  '(package-selected-packages
     (quote
       (counsel swiper lorem-ipsum tabbar ace-window org-bullets which-key try use-package))))
#+END_SRC
* ACTIVE Disabling startup message / menu-bar-mode / tool-bar-mode
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
* ACTIVE Backup files / Auto saves
#+begin_src emacs-lisp
;; backup in one place. flat, no tree structure
(setq backup-directory-alist '((""."~/.emacs.d/backup")))

;; stop creating those #auto-save# files
(setq auto-save-default nil)

(setq create-lockfiles nil)
#+end_src
* ACTIVE Yes-or-no
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* ACTIVE Adding local files to load path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC
* ACTIVE Initializing package resources
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		      (not (gnutls-availaple-p))))
	 (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections."))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t))
  ;; (add-to-list 'package-archives
  ;;    '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  ;; Bootstrap use-package
  (unless (package-installed-p 'use-package)
	  (package-refresh-contents)
	  (package-install 'use-package))

  (use-package try
	  :ensure t)

  (use-package which-key
	  :ensure t
	  :config
	  (which-key-mode)
	  (which-key-setup-side-window-right)
	  (which-key-add-major-mode-key-based-replacements 'org-mode
	    "C-c C-c" "Org C-c C-c"
	    "C-c C-a" "Org Attach"))

  ;; (use-package guide-key
  ;;   :ensure t
  ;;   :init
  ;;   (setq guide-key/guide-key-sequence '("C-x"))
  ;;   (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x v" "C-x 8" "C-x +"))
  ;;   (setq guide-key/recursive-key-sequence-flag t)
  ;;   (setq guide-key/popup-window-position 'bottom)
  ;;   (guide-key-mode 1))


#+end_src
* ACTIVE Automatically upgrading packages
#+begin_src emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t
	  auto-package-update-interval 4)
    (auto-package-update-maybe))
#+end_src
* ACTIVE Theme settings
#+begin_src emacs-lisp
  ;; theme settings
  ;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  ;; (load-theme `tron-legacy t)
  ;; (use-package nyx-theme
  ;;  :ensure t
  ;;  :config (load-theme 'nyx t))
  ;; (use-package ujelly-theme
  ;;    :ensure t)
  ;; (enable-theme 'ujelly)
  (use-package doom-themes
    :ensure t
    :config (load-theme 'doom-outrun-electric t))

  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode))

  ;; (set-background-color "#033f01a90ccc")

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))

  (setq dashboard-startup-banner "/home/cr0c0/Dokumente/using-emacs/unicorn-resized.png")

  (use-package nyan-mode
      :ensure t
      :config (nyan-mode +1))

  ;; (use-package powerline
  ;;   :ensure t
  ;;   :config
  ;;   (powerline-default-theme))
#+end_src
* ACTIVE Transpose frames
#+begin_src emacs-lisp
  (use-package transpose-frame
    :ensure t)
#+end_src
* ACTIVE Font settings
#+begin_src emacs-lisp
(set-default-font "3270Medium Nerd Font Mono Medium")
(load-file "~/.emacs.d/font-size.el")
(require 'font-size)
(font-size-init 14)
(define-key global-map (kbd "M-+") 'font-size-increase)
(define-key global-map (kbd "M--") 'font-size-decrease)
(define-key global-map (kbd "M-0") 'font-size-default)
#+end_src
* ACTIVE Org-mode stuff
  :PROPERTIES:
  :ORDERED:  t
  :END:
#+begin_src emacs-lisp
  (use-package org-bullets
	  :ensure t
	  :config 
	  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; store org mode links to messages
  (require 'org-mu4e)
  ;; store link to message if in header view, not to header query
  (setq org-capture-templates
	'(("r" "reply-to" entry (file+headline "~/org/brain/todo.org" "Mails to reply to")
	   "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))

  ;; (defun org-read-entry-property-name ()
  ;;   "Read a property name from the current entry."
  ;;   (let ((completion-ignore-case t)
  ;; 	(default-prop (or (and (org-at-property-p)
  ;; 			       (org-match-string-no-properties 2))
  ;; 			  org-last-set-property)))
  ;;     (org-completing-read
  ;;      (format "Property [%s]: " (if default-prop default-prop ""))
  ;;      (org-entry-properties nil nil)
  ;;      nil nil nil nil default-prop)))
  ;; 
  ;; (defun my-org-region-to-property (&optional property)
  ;;   "Copies the region as value to an Org-mode property"
  ;;   (interactive)
  ;;   ;; if no region is defined, do nothing
  ;;   (if (use-region-p)
  ;;       ;; if a region string is found, ask for a property and set property to
  ;;       ;; the string in the region
  ;;       (let ((val (replace-regexp-in-string
  ;; 		  "\\`[ \t\n]*" ""
  ;; 		  (replace-regexp-in-string "[ \t\n]*\\'" ""
  ;; 					    (substring (buffer-string)
  ;; 						       (- (region-beginning) 1)
  ;; 						       (region-end))))
  ;; 		 )
  ;; 	    ;; if none was stated by user, read property from user
  ;; 	    (prop (or property
  ;; 		      (org-read-entry-property-name))))
  ;; 	;; set property
  ;; 	(org-set-property prop val))))
  ;; 
  ;; (use-package yankpad
  ;;   :ensure t
  ;;   :defer 10
  ;;   :init
  ;;   (setq yankpad-file "~/org/brain/yankpad.org")
  ;;   :config
  ;;   (bind-key "<f7>" 'yankpad-map)
  ;;   (bind-key "<f12>" 'yankpad-expand)
  ;;   ;; If you want to complete snippets using company-mode
  ;;   (add-to-list 'company-backends #'company-yankpad))
#+end_src
* ACTIVE Ido settings
#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer)
#+end_src
* ACTIVE Swiper settings
#+begin_src emacs-lisp
;; it looks like counsel is a requiremwnt for swiper
(use-package counsel
    :ensure t)

(use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+end_src
* ACTIVE Ivy settings...
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
#+end_src
* ACTIVE Counsel (Better Kill
-ring-buffer manipulation)
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
#+end_src
* ACTIVE Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
#+end_src
* ACTIVE Git settings
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :init
  (progn
    (bind-key "C-x g" 'magit-status)
    ))

(setq magit-status-margin
  '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

  (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)

  (use-package git-timemachine
    :ensure t)

  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
					:hint nil)
    "
  Git gutter:
  _j_: next hunk        _s_tage hunk     _q_uit
  _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ^ ^                   _p_opup hunk
  _h_: first hunk
  _l_: last hunk        set start _R_evision
    "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
		(git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
		(git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
		;; git-gutter-fringe doesn't seem to
		;; clear the markup right away
		(sit-for 0.1)
		(git-gutter:clear))
	 :color blue))

  ;; (use-package git-gutter
  ;;         :ensure t
  ;;         :config
  ;;         (global-git-gutter-mode +1))

#+end_src
* ACTIVE Avy settings
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :config 
  (avy-setup-default)
  :bind ("M-s" . avy-goto-char))
#+end_src
* ACTIVE Autocomplete settings
#+begin_src emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
;; elisp autocompletion
(add-hook 'emacs-lisp-mode-hook 'ielm-auto-complete)
#+end_src
* ACTIVE Use F5 to reload file into current buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
* ACTIVE Reveal.js settings
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
  :ensure t)
#+END_SRC
* ACTIVE Flycheck
  #+BEGIN_SRC 
  (use-package flycheck 
    :ensure t
    :init
    (global-flycheck-mode t))
  (custom-set-variables
    '(flycheck-python-flake8-executable "python3")
    '(flycheck-python-pycompile-executable "python3")
    '(flycheck-python-pylint-executable "python3")
  #+END_SRC
* ACTIVE Python

  #+BEGIN_SRC emacs-lisp

    ;; Be sure to meet the following requirements:
    ;; mkdir -p ~/.emacs.d/.python-environments
    ;; virtualenv -p /usr/local/bin/python3 ~/.emacs.d/.python-environments/jedi
    ;; # or whatever your python3 path is
    ;; # If you feel like installing the server with 'M-x jedi:install-server', also do the following
    ;;
    ;; ~/.emacs.d/.python-environments/jedi/bin/pip install --upgrade ~/.emacs.d/elpa/jedi-20150109.2230/  # you might need to change the version number

    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (setq jedi:environment-root "jedi")
      (setq py-python-command "/usr/bin/python3")
      (use-package jedi
	:ensure t
	:init
	(add-hook 'python-mode-hook 'jedi:setup)
	(add-hook 'python-mode-hook 'jedi:ac-setup))

    ;; Would need these settings for getting elpy to work
    (setq python-shell-interpreter "ipython"
	  python-shell-interpreter-args "-i"
	  elpy-rpc-python-command "python3")

    (use-package elpy
      :ensure t
      :init
      (elpy-enable)
      :config
      (setq elpy-modules (delq 'highlight-indentation-mode elpy-modules))
      )


    ;; Disable elpy's highlight-indentation-mode and use another one -> highlight-indentation-guides
    ;; https://github.com/DarthFennec/highlight-indent-guides
    (add-hook 'python-mode-hook
	      (setq highlight-indentation-mode -1))

    (use-package highlight-indent-guides
      :ensure t
      :init
      (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))

    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-character ?\|)

    (setq highlight-indent-guides-auto-enabled nil)

    (set-face-background 'highlight-indent-guides-odd-face "darkgray")
    (set-face-background 'highlight-indent-guides-even-face "dimgray")
    (set-face-foreground 'highlight-indent-guides-character-face "dimgray")

    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))

    (defun my-merge-imenu ()
      (interactive)
      (let ((mode-imenu (imenu-default-create-index-function))
	    (custom-imenu (imenu--generic-function imenu-generic-expression)))
	    (append mode-imenu custom-imenu)))

    (setq imenu-create-index-function 'my-merge-imenu)
    (define-key python-mode-map (kbd "M-.") 'jedi:goto-definition)
    (define-key python-mode-map (kbd "M-,") 'jedi:goto-definition-pop-marker)
    (define-key python-mode-map (kbd "M-/") 'jedi:show-doc)
    (define-key python-mode-map (kbd "M-?") 'jedi:show-related-names)

  #+END_SRC
* ACTIVE Ruby
#+begin_src emacs-lisp
  (setenv "PATH"
	  (concat
	   "/home/cr0c0/.gem/ruby/2.6.0/bin" ":"
	   (getenv "PATH")))

  (use-package ruby-electric
    :ensure t
    :config
    (progn
      (add-hook 'ruby-mode-hook 'ruby-electric-mode)))

  (use-package seeing-is-believing
    :ensure t)

  (setq seeing-is-believing-prefix "C-.")
  (add-hook 'ruby-mode-hook 'seeing-is-believing)
  (require 'seeing-is-believing)

  (use-package inf-ruby
    :ensure t)

  (autoload 'inf-ruby-minor-mode "if-ruby" "Run an inferior Ruby process" t)
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
#+end_src
* ACTIVE Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)

  (setq yas-snippet-dirs
	'("/home/cr0c0/dev/yasnippet-snippets"
	))
   (yas-global-mode 1)

#+end_src
* ACTIVE Linum mode
#+BEGIN_SRC emacs-lisp
(use-package linum
  :ensure t
  :init
  (progn
    (load-file "/home/cr0c0/.emacs.d/lisp/linum-highlight-current-line-number.el")
    (setq linum-format 'linum-highlight-current-line-number)
    ;;(set-face-background 'line-number "#033f01a90ccc")
    ))
#+END_SRC
* ACTIVE Undo Tree
  #+begin_src emacs-lisp
    ;; (use-package undo-tree
    ;;   :ensure t
    ;;   :init
    ;;   (global-undo-tree-mode t))
  #+end_src
* ACTIVE Org brain settings
#+begin_src emacs-lisp
  (use-package org-brain
    :ensure t
    :init
    (setq org-brain-path "~/org/brain"))

  (use-package ascii-art-to-unicode
    :ensure t)

  ;; ascii-art-to-unicode settings
  (defface aa2u-face '((t . nil))
    "Face for aa2u box drawing characters")
  (advice-add #'aa2u-1c :filter-return
	      (lambda (str) (propertize str 'face 'aa2u-face)))

  (defun aa2u-org-brain-buffer ()
    (let ((inhibit-read-only t))
      (make-local-variable 'face-remapping-alist)
      (add-to-list 'face-remapping-alist
		   '(aa2u-face . org-brain-wires))
      (ignore-errors (aa2u (point-min) (point-max)))))
  (with-eval-after-load 'org-brain
    (add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer))

  ;; setting up helm for using helm-org-rifle later on
  (use-package helm
    :ensure t)

  (use-package helm-org-rifle
    :ensure t)

  (defun helm-org-rifle-brain ()
    "Rifle files in `org-brain-path'."
    (interactive)
    (let ((helm-org-rifle-close-unopened-file-buffers nil))
      (helm-org-rifle-directories (list org-brain-path))))

  (defun helm-org-rifle-open-in-brain (candidate)
    (-let (((buffer . pos) candidate))
      (with-current-buffer buffer
	(goto-char pos)
	(org-brain-visualize-entry-at-pt))))

  (add-to-list 'helm-org-rifle-actions
	       (cons "Show entry in org-brain" 'helm-org-rifle-open-in-brain)
	       t)
#+end_src

* ACTIVE Org agenda settings
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/org/brain/todo.org"))
#+end_src
* ACTIVE Internal Org mode links 
#+begin_src emacs-lisp
  ;; use ivy to insert a link to a heading in the current document
  ;; based on `worf-goto`
  (defun my/worf-insert-internal-link ()
    "Use ivy to insert a link to aheading in the current `org-mode'
  document. Code is based on `worf-goto'."
    (interactive)
    (let ((cands (worf--goto-candidates)))
      (ivy-read "Heading: " cands
		:action 'bjm/worf-insert-internal-link-action)))

  (defun my/worf-insert-internal-link-action (x)
    "Insert link for `bjm/worf-insert-internal-link'"
    ;; goto heading
    (save-excursion
      (goto-char (cdr x))
      ;; store link
      (call-interactively 'org-store-link)
      )
    ;; return to original point and insert link
    (org-insert-last-stored-link 1)
    ;; org-insert-last-stored-link adds a newline, so
    ;; delete this
    (delete-backward-char 1))
#+end_src
* ACTIVE Load cheatsheets
#+begin_src emacs-lisp
  (use-package cheatsheet
    :ensure t)
  (require 'cheatsheet)
  (load-file "~/.dotfiles/common/emacs/cheats.el")
#+end_src

#+RESULTS:
: t
* ACTIVE mu4e settings
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
  (require 'smtpmail)

  ;; smtp
  (setq message-send-mail-function 'smtpmail-send-it
	smtpmail-starttls-credentials
	'(("smtp.gmail.com" 587 nil nil))
	smtpmail-default-smtp-server "smtp.gmail.com"
	smtpmail-smtp-server "smtp.gmail.com"
	smtpmail-smtp-service 587
	smtpmail-debug-info t)

  (require 'mu4e)

  (setq mu4e-maildir (expand-file-name "~/mail/Felix1Koch"))

  ;; get mail
  (setq mu4e-get-mail-command "mbsync -c ~/.emacs.d/.mbsyncrc -V gmail"
	mu4e-update-interval 120
	mu4e-headers-auto-update t)

  ;; general emacs mail settings; used when composing e-mail
  ;; the non-mu4e-* stuff is inherited from emacs/message-mode
  (setq mu4e-reply-to-address "Felix1Koch@gmail.com"
      user-mail-address "Felix1Koch@gmail.com"
      user-full-name  "Felix Koch")

  (setq mu4e-change-filenames-when-moving t)

#+end_src
* ACTIVE Notmuch mail settings
#+begin_src emacs-lisp
  (use-package popwin
    :ensure t)

  (autoload 'notmuch "notmuch mail" t)

  ;; setup mail address and username
  (setq mail-user-agent 'message-user-agent)
  (setq user-mail-address "Felix1Koch@gmail.com"
	user-full-name "Felix1Koch")

  ;; smtp config
  (setq smtpmail-smtp-server "smtp.gmail.com"
	message-send-mail-function 'message-smtpmail-send-it)

  ;; report problems with smtp server
  (setq smtpmail-debug-info t)
  ;; add Cc and Bcc headers to message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

  ;; offlineimap execution

  (defun notmuch-exec-offlineimap ()
      "execute offlineimap"
      (interactive)
      (set-process-sentinel
       (start-process-shell-command "offlineimap"
				    "*offlineimap*"
				    "offlineimap -o")
       '(lambda (process event)
	  (notmuch-refresh-all-buffers)
	  (let ((w (get-buffer-window "*offlineimap*")))
	    (when w
	      (with-selected-window w (recenter (window-end)))))))
      (popwin:display-buffer "*offlineimap*"))

  (add-to-list 'popwin:special-display-config
	       '("*offlineimap*" :dedicated t :position bottom :stick t
		 :height 0.4 :noselect t))
#+end_src
* ACTIVE Neotree
#+begin_src emacs-lisp
    ;; necessary for changing neotree's style
  (use-package all-the-icons
    :ensure t)

  (use-package neotree
    :ensure t
    :config
    (progn
      (setq neo-theme (if (display-graphic-p) 'arrow))))
#+end_src
* ACTIVE Outline settings
#+begin_src emacs-lisp
  ;; This Emacs minor-mode creates an automatically updated buffer called *Ilist* that
  ;; is populated with the current buffer's imenu entries.
  ;; The *Ilist* buffer is typically shown as a sidebar (Emacs vertically splits the window).
  (use-package imenu-list
    :ensure t)
#+end_src

* ACTIVE Change Highlight Indent Guides' color scheme
 #+begin_src emacs-lisp
   (set-face-foreground 'highlight-indent-guides-character-face "white")
 #+end_src
* ACTIVE Shell configuration
#+begin_src emacs-lisp
  ;; (use-package better-shell
  ;;   :ensure t
  ;;   :bind (("C-'" . better-shell-shell)))
  ;; 	 ;;("C-;" . better-shell-remote-open)))

  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))


      (use-package fish-completion
      :ensure t
      :config
      (global-fish-completion-mode))
    ;; (use-package eshell-prompt-extras 
    ;; :ensure t
    ;; :config
    ;; (setq epe-show-python-info nil)
    ;; )

    (use-package eshell-git-prompt
    :ensure t
    :config
    (eshell-git-prompt-use-theme 'git-radar)
    )

    (require 'cl-lib)
    (defun select-or-create (arg)
      "Commentary ARG."
      (if (string= arg "New eshell")
	  (eshell t)
	(switch-to-buffer arg)))
    (defun eshell-switcher (&optional arg)
      "Commentary ARG."
      (interactive)
      (let* (
	     (buffers (cl-remove-if-not (lambda (n) (eq (buffer-local-value 'major-mode n) 'eshell-mode)) (buffer-list)) )
	     (names (mapcar (lambda (n) (buffer-name n)) buffers))
	     (num-buffers (length buffers) )
	     (in-eshellp (eq major-mode 'eshell-mode)))
	(cond ((eq num-buffers 0) (eshell (or arg t)))
	      ((not in-eshellp) (switch-to-buffer (car buffers)))
	      (t (select-or-create (completing-read "Select Shell:" (cons "New eshell" names)))))))

#+end_src
* ACTIVE Set selective display (code folding shortcut)
  #+begin_src emacs-lisp
    (global-set-key (kbd "<f5>") 'set-selective-display-dlw)

    (defun set-selective-display-dlw (&optional level)
      "Fold text indented same of of more than the cursor.
    If level is set, set the indent level to LEVEL.
    if 'selective-display' is already set to LEVEL, clicking
    F5 again will unset 'selective-display' by setting it to 0."
      (interactive "P")
      (if (eq selective-display (1+ (current-column)))
	  (set-selective-display 0)
	(set-selective-display (or level (1+ (current-column))))))
  #+end_src
* ACTIVE Iedit settings
#+begin_src emacs-lisp
  ; mark and edit all copies of the marked region simultaniously. 
  (use-package iedit
  :ensure t)

  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+end_src
* ACTIVE r2pipe settings
#+begin_src emacs-lisp
  (defun load-if-exists (f)
    (if (file-readable-p f)
	(load-file f)))

  (load-if-exists "lisp/r2pipe.el")
#+end_src
* ACTIVE ROP chaining
#+begin_src emacs-lisp


  (defun counsel-rop (arg)
    "ROP gadget Search for a binary"
    (interactive "file name : ")
    (progn
      (setq buffer-name (concat (file-name-base arg ) "_gadgets"))
      (if (get-buffer buffer-name) ()
	(progn
      (shell-command (concat "ROPgadget " " --binary " arg) buffer-name)
      (with-current-buffer buffer-name 
	(bury-buffer))))
      (with-current-buffer buffer-name
	(setq cantidates (split-string (buffer-string) "\n" t))
	))
    (ivy-read " Gadget : " cantidates
	  :re-builder #'ivy--regex-fuzzy
	  :action #'insert
	  :caller 'counsel-rop
	  ))


  (ivy-set-actions
   'counsel-rop
   '(("a" (lambda (x) (insert (car (split-string x "\:")))) "Insert Address")
     ("r" (lambda (x) (insert (cdr (split-string x "\:")))) "Insert Gadget"))
   )

  (global-set-key (kbd "C-c r") 'counsel-rop)
#+end_src
* ACTIVE Org babel rasm2
#+begin_src emacs-lisp
  (require 'ob)

  (defconst org-babel-header-args:rasm2
    '((:arch . :any)
      (:bits  . :any)
      (:disasm . :any)
      )
    "Rasm2 specific header arguments.")


  (defun org-babel-execute:rasm2 (body params)
    "Execute a block code with Org Babel.
  BODY is the source inside the source block and PARAMS is an
  association list over the source block configurations.  This
  function is called by `org-babel-execute-src-block'."

    (let* ((arch (cdr (assq :arch params)))
	   (bits (cdr (assq :bits params))))
      (if  (assq :disasm params)
	  (shell-command-to-string
	   (concat "rasm2 -a  " arch " -b " (number-to-string bits) " -d \"" body "\"" ))
	(with-temp-buffer
	  (insert (shell-command-to-string
		   (concat "rasm2 -C -a " arch " -b " (number-to-string bits) " \"" body "\"" )))
	  (goto-char (point-min))
	  (while (re-search-forward "\"" nil t )
	    (replace-match ""))
	  (goto-char (point-min))
	  (while (re-search-forward "\n" nil t )
	    (replace-match ""))
	  (buffer-string)
	  )))
    )
#+end_src
* DISABLED PDF tools
#+begin_src emacs-lisp
  ;; (use-package pdf-tools
  ;;   :ensure t)
  ;; (use-package org-pdfview
  ;;   :ensure t)
  ;; 
  ;; (require 'pdf-tools)
  ;; (require 'org-pdfview)
#+end_src
* 
* ACTIVE x86 Lookup / nasm mode
#+begin_src emacs-lisp
  (use-package nasm-mode
    :ensure t
    :config
    (add-hook 'asm-mode-hook 'nasm-mode))
#+end_src
* ACTIVE C++ settings
#+begin_src emacs-lisp
  (use-package cmake-ide
    :ensure t)

  (use-package company-irony
    :ensure t)

  (use-package company-irony-c-headers
    :ensure t)

  (use-package flycheck-irony
    :ensure t)

  (defun my/local-set-keys (key-commands)
    "Set multiple local keabindings with KEY-COMMANDS list."
    (let ((local-map (current-local-map)))
      (dolist (kc key-commands)
	(define-key local-map
	  (kbd (car kc))
	  (cdr kc)))))

  (defun my/flycheck ()
    "Configurate flycheck."
    (add-to-list 'display-buffer-alist
		 `(,(rx bos "*Flycheck errors*" eos)
		   (display-buffer-reuse-window
		    display-buffer-in-side-window)
		   (side            . bottom)
		   (reusable-frames . visible)
		   (window-height   . 0.23)))
    (setq flycheck-display-errors-function
	  #'flycheck-display-error-messages-unless-error-list))

  (defun my/irony ()
    "Irony mode configuration."
    (add-hook 'irony-mode-hook 'irony-eldoc)
    (add-to-list 'company-backends 'company-irony)
    (add-to-list 'company-backends 'company-irony-c-headers)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    (add-hook 'flycheck-mode-hook 'flycheck-irony-setup)
    (when (or (eq major-mode 'c-mode)	; Prevent from being loaded by c derived mode
	      (eq major-mode 'c++-mode))
      (irony-mode 1)))

  (defun my/cc-base ()
    "Common configuration for c and c++ mode."
    ;; Company mode
    (setf company-backends '())
    (add-to-list 'company-backends 'company-keywords)
    (my/irony))

  ;; add it to c++-mode-hook
  (add-hook 'c++-mode-hook 'my/cc-base)

  (add-hook 'c++-mode-hook '(lambda()
			      (cmake-ide-setup)
			      (my/local-set-keys
			       `("C-c C-a" . cmake-ide-compile)
			       )))

  ;; generate informations about current project .dir-locals.el
  ;; with following content
  ;; ((c++-mode . ((cmake-ide-build-dir . "path/to/your/project/build"))))

  (add-hook 'c++-mode-hook #'(lambda ()
			       (setf company-backends '())
			       (add-to-list 'company-backends 'company-keywords)
			       (add-to-list 'company-backends 'company-irony)
			       (add-to-list 'company-backends 'company-irony-c-headers)))

  (add-hook 'c++-mode-hook 'my/flycheck)

  (use-package rtags
    :commands rtags-start-process-unless-running
    :config (progn
	      (message "Rtags loaded")
	      (use-package company-rtags)))

  (defun my/rtags ()
    "Rtags configuration.
  Used only for nevigation."
    (interactive)
    (rtags-start-process-unless-running)
    (setq rtags-display-result-backend 'helm)
    (my/local-set-keys
     '(
       ("M-."     .  rtags-find-symbol-at-point)
	   ("M-?"     .  rtags-find-references-at-point)
       ("M-,"     .  rtags-location-stack-back)
       ("C-,"   .    rtags-location-stack-forward)
       ("C-c r r" .  rtags-rename-symbolrtags-next-match)
       ))
  
  (add-hook 'kill-emacs-hook 'rtags-quit-rdm))
#+end_src
* ACTIVE Solidity mode 
#+begin_src emacs-lisp
  (use-package solidity-mode
    :ensure t)

#+end_src
* ACTIVE Scheme mode
#+begin_src emacs-lisp
  (use-package geiser
    :ensure t
    :config
    (setq geiser-active-implementations '(mit)))

  (use-package paredit
    :ensure t
    )
#+end_src
* DISABLED Json / NodeJS editing
#+begin_src emacs-lisp
  ;; (use-package json-mode
  ;;   :ensure t)
  ;; 
  ;; (use-package nodejs-repl
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'js-mode-hook
  ;; 	    (lambda ()
  ;; ;; ;; 	      (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-expression)
  ;; 	      (define-key js-mode-map (kbd "C-c C-j") 'nodejs-repl-send-line)
  ;; 	      (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
  ;; 	      (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
  ;; 	      (define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl)
  ;; 	      )))
#+end_src
* ACTIVE Erlang settings
#+begin_src emacs-lisp
  ;; (use-package erlang
  ;;   :ensure t)
  ;; 
  ;; (use-package popup
  ;;   :ensure t)
  ;; 
  ;; (use-package company
  ;;   :ensure t)
  ;; 
  ;; (use-package flycheck-tip
  ;;   :ensure t)
  ;; 
  ;; (setq load-path (cons "/usr/lib/erlang/lib/tools-3.3/emacs"
  ;; 		      load-path))
  ;; 
  ;; (require 'erlang-start)
  ;; (setq erlang-root-dir "/usr/lib/erlang/")
  ;; (setq exec-path (cons "/usr/lib/erlang/bin" exec-path))
  ;; (setq erlang-man-root-dir "/usr/lib/erlang/man")
  ;; 
  ;; ;; flycheck settings
  ;; (require 'flycheck)
  ;; (flycheck-define-checker erlang-otp
  ;;   "An Erlang syntax checker using the Erlang interpreter."
  ;;   :command ("erlc" "-o" temporary-directory "-Wall"
  ;; 	    "-I" "../include" "-I" "../../include"
  ;; 	    "-I" "../../../include" source)
  ;;   :error-patterns
  ;;   ((warning line-start (file-name) ":" line ": Warning:" (message) line-end)
  ;;    (error line-start (file-name) ":" line ": " (message) line-end))
  ;;   :modes  erlang-mode)
  ;; 
  ;; (add-hook 'erlang-mode-hook
  ;; 	  (lambda ()
  ;; 	    (flycheck-select-checker 'erlang-otp)
  ;; 	    (flycheck-mode)))
  ;; 
  ;; ;; setting up distel
  ;; (push "~/.emacs.d/distel/elisp/" load-path)
  ;; (require 'distel)
  ;; (distel-setup)
  ;; 
  ;; ;; setting up company-distel
  ;; (push "~/.emacs.d/company-distel/" load-path)
  ;; (require 'company-distel)
  ;; (add-to-list 'company-backends 'company-distel)
  ;; 
  ;; ;; enable company just for erlang
  ;; (add-hook 'erlang-mode-hook 'global-company-mode)
  ;; 
  ;; ;; flycheck-tip settings
  ;; (require 'flycheck-tip)
#+end_src
* DISABLED Elm settings
#+begin_src emacs-lisp
  ;; (use-package elm-mode
  ;;   :ensure t)
  ;; (use-package flycheck
  ;;   :ensure t)
  ;; (use-package flycheck-elm
  ;;   :ensure t)
  ;; (use-package company
  ;;   :ensure t)
  ;; (use-package elm-oracle
  ;;   :ensure t)
#+end_src
* ACTIVE Haskell settings
#+begin_src emacs-lisp
  ;; LSP
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  (use-package yasnippet
    :ensure t)
  (use-package lsp-mode
    :ensure t
    :hook (haskell-mode . lsp)
    :commands lsp)
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
  (use-package lsp-haskell
   :ensure t
   :config
   (setq lsp-haskell-process-path-hie "/home/cr0c0/.cabal/bin/ghcide")
   (setq lsp-haskell-process-args-hie '())
   ;; Comment/uncomment this line to see interactions between lsp client/server.
   ;;(setq lsp-log-io t)
   )

  (use-package eglot
    :ensure t
    :config
    (add-to-list 'eglot-server-programs '(haskell-mode . ("/home/cr0c0/.cabal/bin/ghcide" "--lsp"))))
#+end_src
* ACTIVE Helm Youtube
#+begin_src emacs-lisp
  (use-package helm
    :ensure t)

  (use-package request
    :ensure t)

  (require 'cl-lib)
  (require 'helm)
  (require 'request)
  (require 'json)

  (defgroup helm-youtube nil
    "Helm youtube settings."
    :group 'tools)

  (defcustom helm-youtube-key nil
    "Your google api key.";; INSERT YOUR KEY FROM GOOGLE ACCOUNT
    :group 'helm-youtube)

  ;;;###autoload
  (defun helm-youtube ()
    (interactive)
    (unless helm-youtube-key
      (error "You must set `helm-youtube-key' to use this command"))
    (request
      "https://www.googleapis.com/youtube/v3/search"
      :params `(("part" . "snippet")
		("q" . ,(read-string "Search YouTube: "))
		("type" . "video")
		("maxResults" . "20")
		("key" . ,helm-youtube-key))
      :parser 'json-read
      :success (cl-function
		(lambda (&key data &allow-other-keys)
		  (helm-youtube-wrapper data)))
      :status-code '((400 . (lambda (&rest _) (message "Got 400.")))
		     (418 . (lambda (&rest _) (message "Got 400."))))
      :complete (message "searching...")))

  (defun playerctl-playvideo (video-id)
    (shell-command (concat "playerctl --player=vlc open http://www.youtube.com/watch?v=" video-id)))

  (defun helm-youtube-playvideo (video-id)
    "Format the youtube URL via VIDEO-ID."
    ;; (browse-url
    ;;  (concat "http://www.youtube.com/watch?v=" video-id)))
    (playerctl-playvideo video-id))

  (defun helm-youtube-tree-assoc (key tree)
    "Build the tree-assoc from KEY TREE for youtube query."
    (when (consp tree)
      (cl-destructuring-bind (x . y)  tree
	(if (eql x key) tree
	  (or (helm-youtube-tree-assoc key x) (helm-youtube-tree-assoc key y))))))

  (defun helm-youtube-wrapper (*qqJson*)
    "Parse the json provided by *QQJSON* and provide search result targets."
    (let (*results* you-source)
      (setq *qqJson* (cdr (assoc 'items *qqJson*)))
      (cl-loop for x being the elements of *qqJson*
	       do (push (cons (cdr (helm-youtube-tree-assoc 'title x)) (cdr (helm-youtube-tree-assoc 'videoId x))) *results*))
      (let ((you-source
	     `((name . "Youtube Search Results")
	       (candidates . ,(mapcar 'car *results*))
	       (action . (lambda (candidate)
			   ;; (message-box "%s" (candidate))
			   (helm-youtube-playvideo (cdr (assoc candidate *results*)))
			   )))))
	(helm :sources '(you-source)))))
#+end_src
* DISABLED Yasnippet / Yankpad
#+begin_src emacs-lisp
  ;; Yet another snippet extension program
  ;; (use-package yasnippet
  ;;   :diminish yas-minor-mode
  ;;   :config
  ;;     (yas-global-mode 1)
  ;;     ;; respect the spacing in my snippet declarations
  ;;     (setq yas-indent-line 'fixed)
  ;; )

  ;; Nice “interface” to said program
  ;; (use-package yankpad
  ;;   ;; :if company-mode ;; load & initialise only if company-mode is defined
  ;;   :demand t
  ;;   :init
  ;;     ;; Location of templates
  ;;     (setq yankpad-file "~/.emacs.d/yankpad.org")
  ;;     (setq yankpad-category "Category: Default")
  ;;   :config
  ;;     ;; If you want to complete snippets using company-mode
  ;;     ;; (add-to-list 'company-backends #'company-yankpad)
  ;;     ;; If you want to expand snippets with hippie-expand
  ;;     ;; (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)
  ;;     ;; Load the snippet templates -- useful after yankpad is altered
  ;;     (add-hook 'after-init-hook 'yankpad-reload)
  ;; )

  ;; Elementary textual completion backend.
  ;; (setq company-backends
  ;;   (add-to-list 'company-backends 'company-dabbrev))
  ;;
  ;; Add yasnippet support for all company backends
  ;; https://emacs.stackexchange.com/a/10520/10352
  ;;
  ;; (defvar company-mode/enable-yas t
  ;;  "There can only be one main completition backend, so let's
  ;;   enable yasnippet/yankpad as a secondary for all completion backends.")

  ;; (defun company-mode/backend-with-yas (backend)
  ;;  (if (or (not company-mode/enable-yas)
  ;;	  (and (listp backend) (member 'company-yankpad backend)))
  ;;      backend
  ;;    (append (if (consp backend) backend (list backend))
  ;;	    '(:with company-yankpad))))

  ;; (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+end_src
* ACTIVE LaTeX Beamer
#+begin_src emacs-lisp
  (setq org-export-latex-listings t)

  ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
  ;; but adapted to use latexmk 4.20 or higher.
  (defun my-auto-tex-cmd ()
    "When exporting from .org with latex, automatically run latex,
       pdflatex, or xelatex as appropriate, using latexmk."
    (let ((texcmd)))
    ;; default command: oldstyle latex via dvi
    (setq texcmd "latexmk -dvi -pdfps -quiet %f")
    ;; pdflatex -> .pdf
    (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
	(setq texcmd "latexmk -pdf -quiet %f"))
    ;; xelatex -> .pdf
    (if (string-match "LATEX_CMD: xelatex" (buffer-string))
	(setq texcmd "/home/rincewind/bin/latexmk.pl -pdflatex=xelatex -pdf -quiet %f"))
    ;; LaTeX compilation command
    (setq org-latex-to-pdf-process (list texcmd)))

  (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)


  ;; Specify default packages to be included in every tex file, whether pdflatex or xelatex
  (setq org-export-latex-packages-alist
	'(("" "graphicx" t)
	      ("" "longtable" nil)
	      ("" "float" nil)))

  (defun my-auto-tex-parameters ()
	"Automatically select the tex packages to include."
	;; default packages for ordinary latex or pdflatex export
	(setq org-export-latex-default-packages-alist
	      '(("AUTO" "inputenc" t)
		("T1"   "fontenc"   t)
		(""     "fixltx2e"  nil)
		(""     "wrapfig"   nil)
		(""     "soul"      t)
		(""     "textcomp"  t)
		(""     "marvosym"  t)
		(""     "wasysym"   t)
		(""     "latexsym"  t)
		(""     "amssymb"   t)
		(""     "hyperref"  nil)))

	;; Packages to include when xelatex is used
	(if (string-match "LATEX_CMD: xelatex" (buffer-string))
	    (setq org-export-latex-default-packages-alist
		  '(("" "fontspec" t)
		    ("" "xunicode" t)
		    ("" "url" t)
		    ("" "rotating" t)
		    ("" "polyglossia" t) ;; statt babel
		    ("" "soul" t)
		    ("xetex" "hyperref" nil)
		    )))

	(if (string-match "LATEX_CMD: xelatex" (buffer-string))
	    (setq org-export-latex-classes
		  (cons '("article"
			  "\\documentclass[11pt,article,oneside]{memoir}"
			  ("\\section{%s}" . "\\section*{%s}")
			  ("\\subsection{%s}" . "\\subsection*{%s}")
			  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			  ("\\paragraph{%s}" . "\\paragraph*{%s}")
			  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
			org-export-latex-classes))))

  (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
#+end_src
* ACTIVE Symon
#+begin_src emacs-lisp
;; System monitor in bar
(use-package symon
  :defer 3
  :ensure t
  :config
  (setq symon-sparkline-type 'bounded)
  (define-symon-monitor symon-current-date-time-monitor
    :interval 5
    :display (propertize
	      (format-time-string "%k:%M %a %d %b %Y ")
	      'face 'font-lock-type-face))
  (setq symon-monitors
	(cond ((memq system-type '(gnu/linux cygwin))
	       '(symon-current-date-time-monitor
		 symon-linux-memory-monitor
		 symon-linux-cpu-monitor
		 symon-linux-network-rx-monitor
		 symon-linux-network-tx-monitor
		 symon-linux-battery-monitor))
	      ((memq system-type '(darwin))
	       '(symon-current-date-time-monitor
		 symon-darwin-memory-monitor
		 symon-darwin-cpu-monitor
		 symon-darwin-network-rx-monitor
		 symon-darwin-network-tx-monitor
		 symon-darwin-battery-monitor))
	      ((memq system-type '(windows-nt))
	       '(symon-current-date-time-monitor
		 symon-windows-memory-monitor
		 symon-windows-cpu-monitor
		 symon-windows-network-rx-monitor
		 symon-windows-network-tx-monitor
		 symon-windows-battery-monitor))))
  (symon-mode)
  )
#+end_src
* ACTIVE Openwith
#+begin_src emacs-lisp
      (when (require 'openwith nil 'noerror)
	(setq openwith-associations
	      (list
	       (list (openwith-make-extension-regexp
		      '("mpg" "mpeg" "mp3" "mp4"
			"avi" "wmv" "wav" "mov" "flv"
			"ogm" "ogg" "mkv"))
		     "vlc"
		     '(file))
	       (list (openwith-make-extension-regexp
		      '("xbm" "pbm" "pgm" "ppm" "pnm"
			"png" "gif" "bmp" "tif" "jpeg" "jpg"))
		     "display"
		     '(file))
	       (list (openwith-make-extension-regexp
		      '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
		     "libreoffice"
		     '(file))
	       '("\\.lyx" "lyx" (file))
	       '("\\.chm" "kchmviewer" (file))
	       (list (openwith-make-extension-regexp
		      '("pdf" "ps" "ps.gz" "dvi"))
		     "evince"
		     '(file))
	       ))
	(openwith-mode 1))
#+end_src
