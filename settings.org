# -*- mode: org; coding: utf-8; -*-
#+STARTUP: overview
#+TODO: ACTIVE | DISABLED
* ACTIVE Custom variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
  '(package-selected-packages
     (quote
       (counsel swiper lorem-ipsum tabbar ace-window org-bullets which-key try use-package))))
#+END_SRC
* ACTIVE Disabling startup message / menu-bar-mode / tool-bar-mode    
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
* ACTIVE Adding local files to load path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC
* ACTIVE Initializing package resources
#+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-availaple-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections."))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t))
;; (add-to-list 'package-archives
;;    '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

(use-package try
        :ensure t)
(use-package which-key
        :ensure t
        :config
        (which-key-mode))
#+end_src
* ACTIVE Theme settings 
#+begin_src emacs-lisp
;; theme settings
;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
;; (load-theme `tron-legacy t)
;;(use-package nyx-theme
;;  :ensure t
;;  :config (load-theme 'nyx t))
(use-package ujelly-theme
    :ensure t)

(enable-theme 'ujelly)
(set-background-color "#033f01a90ccc")

(use-package nyan-mode
    :ensure t
    :config (nyan-mode +1)) 
#+end_src
* ACTIVE Font settings
#+begin_src emacs-lisp
(set-default-font "3270Medium Nerd Font Mono Medium")
(load-file "~/.emacs.d/font-size.el")
(require 'font-size)
(font-size-init 14)
(define-key global-map (kbd "M-+") 'font-size-increase)
(define-key global-map (kbd "M--") 'font-size-decrease)
(define-key global-map (kbd "M-0") 'font-size-default)
#+end_src
* ACTIVE Org-mode stuff
#+begin_src emacs-lisp
(use-package org-bullets
        :ensure t
        :config 
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
* ACTIVE Ido settings
#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer)
#+end_src
* ACTIVE Swiper settings
#+begin_src emacs-lisp
;; it looks like counsel is a requiremwnt for swiper
(use-package counsel
    :ensure t)

(use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+end_src
* ACTIVE Ivy settings...
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
#+end_src
* ACTIVE Git gutter
#+begin_src emacs-lisp
(use-package git-gutter
        :ensure t
        :config
        (global-git-gutter-mode +1))
#+end_src
* ACTIVE Avy settings
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :config 
  (avy-setup-default)
  :bind ("M-s" . avy-goto-char))
#+end_src
* ACTIVE Autocomplete settings
#+begin_src emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
;; elisp autocompletion
(add-hook 'emacs-lisp-mode-hook 'ielm-auto-complete)
#+end_src
* ACTIVE Use F5 to reload file into current buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
* ACTIVE Reveal.js settings
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
  :ensure t)
#+END_SRC
* ACTIVE Flycheck
  #+BEGIN_SRC 
  (use-package flycheck 
    :ensure t
    :init
    (global-flycheck-mode t))
  (custom-set-variables
    '(flycheck-python-flake8-executable "python3")
    '(flycheck-python-pycompile-executable "python3")
    '(flycheck-python-pylint-executable "python3")
  #+END_SRC
* ACTIVE Python
  #+BEGIN_SRC emacs-lisp

;; Be sure to meet the following requirements:
;; mkdir -p ~/.emacs.d/.python-environments
;; virtualenv -p /usr/local/bin/python3 ~/.emacs.d/.python-environments/jedi  
;; # or whatever your python3 path is
;; # If you feel like installing the server with 'M-x jedi:install-server', also do the following
;;
;; ~/.emacs.d/.python-environments/jedi/bin/pip install --upgrade ~/.emacs.d/elpa/jedi-20150109.2230/  # you might need to change the version number

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
(setq jedi:environment-root "jedi")
  (setq py-python-command "/usr/bin/python3")
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

;; Would need these settings for getting elpy to work
(setq python-shell-interpreter "python3"
      python-shell-interpreter-args "-i"
      elpy-rpc-python-command "python3")

(use-package elpy
  :ensure t
  :config
  (elpy-enable))
  #+END_SRC
* ACTIVE Linum mode
#+BEGIN_SRC emacs-lisp
(use-package linum
  :ensure t
  :init
  (progn
    (load-file "/home/cr0c0/.emacs.d/lisp/linum-highlight-current-line-number.el")
    (setq linum-format 'linum-highlight-current-line-number)
    ;;(set-face-background 'line-number "#033f01a90ccc")
    ))
#+END_SRC
* ACTIVE Undo Tree
  #+begin_src emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+end_src
* ACTIVE Org brain settings
#+begin_src emacs-lisp
  (use-package org-brain
    :ensure t
    :init
    (setq org-brain-path "~/org/brain"))

  ;; ascii-art-to-unicode settings
  (defface aa2u-face '((t . nil))
    "Face for aa2u box drawing characters")
  (advice-add #'aa2u-1c :filter-return
	      (lambda (str) (propertize str 'face 'aa2u-face)))
  (defun aa2u-org-brain-buffer ()
    (let ((inhibit-read-only t))
      (make-local-variable 'face-remapping-alist)
      (add-to-list 'face-remapping-alist
		   '(aa2u-face . org-brain-wires))
      (ignore-errors (aa2u (point-min) (point-max)))))
  (with-eval-after-load 'org-brain
    (add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer))

#+end_src

* ACTIVE Org agenda settings
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/org/brain/todo.org"))
#+end_src
* ACTIVE Load cheatsheets
#+begin_src emacs-lisp
  (use-package cheatsheet
    :ensure t)
  (require 'cheatsheet)
  (load-file "~/.dotfiles/common/emacs/cheats.el")
#+end_src

#+RESULTS:
: t
